base64特点：
alphabet:[A-Za-z0-9+/=]
* 字符串只可能包含A-Z，a-z，0-9，+，/，=字符 
* 字符串长度是4的倍数 
* =只会出现在字符串最后，可能没有或者一个等号或者两个等号
Base64编码要求把3个8位字节（3*8=24）转化为4个6位的字节（4*6=24），之后在6位的前面补两个0，形成8位一个字节的形式。 如果剩下的字符不足3个字节，则用0填充，输出字符使用‘=’，因此编码后输出的文本末尾可能会出现1或2个‘=’

正则：^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$


base32特点：RFC 4648
alphabet:[A-Z2-7=]
首先将二进制串划分每5位一组，不足5位补0。Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数
然后将各组的5位二进制串转成十进制（5bits对应着10进制的数值为0-31）。
用字母A-Z和数字2-7这32个字母进行Base32编码，即对照下标将其转换为字符串。
Base32将任意字符串按照字节进行切分，并将每个字节对应的二进制值（不足8比特高位补0）串联起来，按照5比特一组进行切分，并将每组二进制值转换成十进制来对应32个可打印字符中的一个。由于数据的二进制传输是按照8比特一组进行（即一个字节），因此Base32按5比特切分的二进制数据必须是40比特的倍数（5和8的最小公倍数）。例如输入单字节字符“%”，它对应的二进制值是“100101”，前面补两个0变成“00100101”（二进制值不足8比特的都要在高位加0直到8比特），从左侧开始按照5比特切分成两组：“00100”和“101”，后一组不足5比特，则在末尾填充0直到5比特，变成“00100”和“10100”，这两组二进制数分别转换成十进制数，通过上述表格即可找到其对应的可打印字符“E”和“U”，但是这里只用到两组共10比特，还差30比特达到40比特，按照5比特一组还需6组，则在末尾填充6个“=”。填充“=”符号的作用是方便一些程序的标准化运行，大多数情况下不添加也无关紧要，而且，在URL中使用时必须去掉“=”符号。

Base32比Base64多占用大约20％的空间。因为Base32使用8个ASCII字符去编码原数据中的5个字节数据，而Base64是使用4个ASCII字符去编码原数据中的3个字节数据。

正则：^([A-Z2-7]{8})*([A-Z2-7]{8}|[A-Z2-7]{2}={6}|[A-Z2-7]{3}={5}|[A-Z2-7]{4}={4}|[A-Z2-7]{5}={3}|[A-Z2-7]{6}={2})$

base62特点：
alphabet:[A-Za-z0-9]
正则：^[A-Za-z0-9]*[A-Za-z0-9]$


base58特点：
alphabet:[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]
正则：^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]*[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]$



{"name":"base16","regStr": "^([0-9A-Fa-f]{2})*([0-9A-Fa-f]{2})$"},
        {"name":"base32","regStr": "^([A-Z2-7]{8})*([A-Z2-7]{8}|[A-Z2-7]{2}={6}|[A-Z2-7]{3}={5}|[A-Z2-7]{4}={4}|[A-Z2-7]{5}={3}|[A-Z2-7]{6}={2}|[A-Z2-7]{7}={1})$"},
        {"name":"base36","regStr":  "^[0-9A-Z]*[0-9A-Z]$"},
        {"name":"base58","regStr": "^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]*[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]$"},
        {"name":"base62","regStr": "^[A-Za-z0-9]*[A-Za-z0-9]$"},
        {"name":"base64","regStr": "^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$"},
        {"name":"base85","regStr": "^[0-9a-zA-Z.\\-:+=^!/*?&<>()[]{}@%$#]*[0-9a-zA-Z.\\-:+=^!/*?&<>()[]{}@%$#]$"},
        {"name":"base91","regStr": "^[0-9a-zA-Z.:+=^!/*?&<>()[]{}@%$#`|~\"_,]*[0-9a-zA-Z.\\-:+=^!/*?&<>()[]{}@%$#`|~\"_,]$"},
        {"name":"base92","regStr": "^[0-9a-zA-Z.\\-:+=^!/*?&<>()[]{}@%$#`|~\"_,]*[0-9a-zA-Z.\\-:+=^!/*?&<>()[]{}@%$#`|~\"_,]$"}


." '  , :[]
0-9A-Za-z!#$%&()*+\-;<=>?@^_`{|}~


` \ " ' _ , ;
0-9a-zA-Z.\-:+=^!/*?&<>()[]




